// Mocks generated by Mockito 5.4.4 from annotations
// in beta_app/test/mocks/mock_file_service_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:beta_app/enums/common_enums.dart' as _i7;
import 'package:beta_app/models/common/result.dart' as _i3;
import 'package:beta_app/modules/data_management/models/database_data_file.dart'
    as _i6;
import 'package:beta_app/modules/input_output/services/file_service.dart'
    as _i4;
import 'package:beta_app/modules/logging/providers/i_logging_provider.dart'
    as _i2;
import 'package:fl_chart/fl_chart.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeILoggingProvider_0 extends _i1.SmartFake
    implements _i2.ILoggingProvider {
  _FakeILoggingProvider_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i4.FileService {
  MockFileService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ILoggingProvider get logger => (super.noSuchMethod(
        Invocation.getter(#logger),
        returnValue: _FakeILoggingProvider_0(
          this,
          Invocation.getter(#logger),
        ),
      ) as _i2.ILoggingProvider);

  @override
  _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>> loadAllFiles() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAllFiles,
          [],
        ),
        returnValue: _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>>.value(
            _FakeResult_1<List<_i6.DatabaseDataFile>>(
          this,
          Invocation.method(
            #loadAllFiles,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>>);

  @override
  _i5.Future<_i3.Result<String>> loadFileAsString(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFileAsString,
          [filePath],
        ),
        returnValue: _i5.Future<_i3.Result<String>>.value(_FakeResult_1<String>(
          this,
          Invocation.method(
            #loadFileAsString,
            [filePath],
          ),
        )),
      ) as _i5.Future<_i3.Result<String>>);

  @override
  _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>> fetchDataFiles(
          {_i7.DataFileType? filterType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchDataFiles,
          [],
          {#filterType: filterType},
        ),
        returnValue: _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>>.value(
            _FakeResult_1<List<_i6.DatabaseDataFile>>(
          this,
          Invocation.method(
            #fetchDataFiles,
            [],
            {#filterType: filterType},
          ),
        )),
      ) as _i5.Future<_i3.Result<List<_i6.DatabaseDataFile>>>);

  @override
  _i5.Future<_i3.Result<void>> saveFile(
    _i6.DatabaseDataFile? dataFile,
    List<int>? content,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveFile,
          [
            dataFile,
            content,
          ],
        ),
        returnValue: _i5.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #saveFile,
            [
              dataFile,
              content,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Result<void>>);

  @override
  _i5.Future<_i3.Result<void>> deleteFile(String? fileName) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [fileName],
        ),
        returnValue: _i5.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #deleteFile,
            [fileName],
          ),
        )),
      ) as _i5.Future<_i3.Result<void>>);

  @override
  _i5.Future<_i3.Result<List<int>>> exportDataAsImage(
          _i6.DatabaseDataFile? dataFile) =>
      (super.noSuchMethod(
        Invocation.method(
          #exportDataAsImage,
          [dataFile],
        ),
        returnValue:
            _i5.Future<_i3.Result<List<int>>>.value(_FakeResult_1<List<int>>(
          this,
          Invocation.method(
            #exportDataAsImage,
            [dataFile],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<int>>>);

  @override
  _i5.Future<_i3.Result<List<int>>> loadFileData(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadFileData,
          [filePath],
        ),
        returnValue:
            _i5.Future<_i3.Result<List<int>>>.value(_FakeResult_1<List<int>>(
          this,
          Invocation.method(
            #loadFileData,
            [filePath],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<int>>>);

  @override
  _i5.Future<_i3.Result<List<_i8.FlSpot>>> loadCsvFileAsFlSpots(
          String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadCsvFileAsFlSpots,
          [filePath],
        ),
        returnValue: _i5.Future<_i3.Result<List<_i8.FlSpot>>>.value(
            _FakeResult_1<List<_i8.FlSpot>>(
          this,
          Invocation.method(
            #loadCsvFileAsFlSpots,
            [filePath],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<_i8.FlSpot>>>);

  @override
  _i5.Future<_i3.Result<List<_i8.FlSpot>>> loadJsonFileAsFlSpots(
          String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadJsonFileAsFlSpots,
          [filePath],
        ),
        returnValue: _i5.Future<_i3.Result<List<_i8.FlSpot>>>.value(
            _FakeResult_1<List<_i8.FlSpot>>(
          this,
          Invocation.method(
            #loadJsonFileAsFlSpots,
            [filePath],
          ),
        )),
      ) as _i5.Future<_i3.Result<List<_i8.FlSpot>>>);
}
