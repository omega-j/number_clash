// Mocks generated by Mockito 5.4.4 from annotations
// in beta_app/test/mocks/mock_localization_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;
import 'dart:ui' as _i2;

import 'package:beta_app/enums/common_enums.dart' as _i8;
import 'package:beta_app/models/common/result.dart' as _i4;
import 'package:beta_app/modules/input_output/providers/i_input_output_provider.dart'
    as _i6;
import 'package:beta_app/modules/localization/providers/localization_provider.dart'
    as _i3;
import 'package:beta_app/modules/logging/providers/i_logging_provider.dart'
    as _i5;
import 'package:beta_app/modules/settings/services/app_settings_service.dart'
    as _i7;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:state_notifier/state_notifier.dart' as _i12;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocale_0 extends _i1.SmartFake implements _i2.Locale {
  _FakeLocale_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLocalizationState_1 extends _i1.SmartFake
    implements _i3.LocalizationState {
  _FakeLocalizationState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_2<T> extends _i1.SmartFake implements _i4.Result<T> {
  _FakeResult_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalizationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalizationProvider extends _i1.Mock
    implements _i3.LocalizationProvider {
  MockLocalizationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set logger(_i5.ILoggingProvider? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ioProvider(_i6.IInputOutputProvider? _ioProvider) => super.noSuchMethod(
        Invocation.setter(
          #ioProvider,
          _ioProvider,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set appSettingsService(_i7.AppSettingsService? _appSettingsService) =>
      super.noSuchMethod(
        Invocation.setter(
          #appSettingsService,
          _appSettingsService,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isReady => (super.noSuchMethod(
        Invocation.getter(#isReady),
        returnValue: false,
      ) as bool);

  @override
  _i8.LanguageCode get currentLanguageCode => (super.noSuchMethod(
        Invocation.getter(#currentLanguageCode),
        returnValue: _i8.LanguageCode.arabic,
      ) as _i8.LanguageCode);

  @override
  _i2.Locale get currentLocale => (super.noSuchMethod(
        Invocation.getter(#currentLocale),
        returnValue: _FakeLocale_0(
          this,
          Invocation.getter(#currentLocale),
        ),
      ) as _i2.Locale);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<void> get onLanguageChange => (super.noSuchMethod(
        Invocation.getter(#onLanguageChange),
        returnValue: _i9.Stream<void>.empty(),
      ) as _i9.Stream<void>);

  @override
  List<_i2.Locale> get supportedLocales => (super.noSuchMethod(
        Invocation.getter(#supportedLocales),
        returnValue: <_i2.Locale>[],
      ) as List<_i2.Locale>);

  @override
  set onError(_i10.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i9.Stream<_i3.LocalizationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i3.LocalizationState>.empty(),
      ) as _i9.Stream<_i3.LocalizationState>);

  @override
  _i3.LocalizationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeLocalizationState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.LocalizationState);

  @override
  set state(_i3.LocalizationState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.LocalizationState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeLocalizationState_1(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i3.LocalizationState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<bool> load() => (super.noSuchMethod(
        Invocation.method(
          #load,
          [],
        ),
        returnValue: _i9.Future<bool>.value(false),
      ) as _i9.Future<bool>);

  @override
  _i9.Future<_i4.Result<void>> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i9.Future<_i4.Result<void>>.value(_FakeResult_2<void>(
          this,
          Invocation.method(
            #initialize,
            [],
          ),
        )),
      ) as _i9.Future<_i4.Result<void>>);

  @override
  _i4.Result<void> switchLanguage(String? languageCode) => (super.noSuchMethod(
        Invocation.method(
          #switchLanguage,
          [languageCode],
        ),
        returnValue: _FakeResult_2<void>(
          this,
          Invocation.method(
            #switchLanguage,
            [languageCode],
          ),
        ),
      ) as _i4.Result<void>);

  @override
  String translate(
    String? key, {
    Map<String, String>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #translate,
          [key],
          {#params: params},
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #translate,
            [key],
            {#params: params},
          ),
        ),
      ) as String);

  @override
  String getString(
    String? key, {
    Map<String, String>? params,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
          {#params: params},
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getString,
            [key],
            {#params: params},
          ),
        ),
      ) as String);

  @override
  void setCurrentLanguage(_i8.LanguageCode? languageCode) => super.noSuchMethod(
        Invocation.method(
          #setCurrentLanguage,
          [languageCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i2.Locale> getAvailableLanguages() => (super.noSuchMethod(
        Invocation.method(
          #getAvailableLanguages,
          [],
        ),
        returnValue: <_i2.Locale>[],
      ) as List<_i2.Locale>);

  @override
  _i4.Result<List<_i2.Locale>> getSupportedLocales() => (super.noSuchMethod(
        Invocation.method(
          #getSupportedLocales,
          [],
        ),
        returnValue: _FakeResult_2<List<_i2.Locale>>(
          this,
          Invocation.method(
            #getSupportedLocales,
            [],
          ),
        ),
      ) as _i4.Result<List<_i2.Locale>>);

  @override
  _i4.Result<void> loadLocalizedStrings(
    String? locale,
    Map<String, String>? localizedStrings,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLocalizedStrings,
          [
            locale,
            localizedStrings,
          ],
        ),
        returnValue: _FakeResult_2<void>(
          this,
          Invocation.method(
            #loadLocalizedStrings,
            [
              locale,
              localizedStrings,
            ],
          ),
        ),
      ) as _i4.Result<void>);

  @override
  void setLanguage(String? languageCode) => super.noSuchMethod(
        Invocation.method(
          #setLanguage,
          [languageCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyLanguageChange() => super.noSuchMethod(
        Invocation.method(
          #notifyLanguageChange,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i3.LocalizationState? old,
    _i3.LocalizationState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i10.RemoveListener addListener(
    _i12.Listener<_i3.LocalizationState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i10.RemoveListener);
}
