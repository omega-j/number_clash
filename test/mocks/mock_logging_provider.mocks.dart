// Mocks generated by Mockito 5.4.4 from annotations
// in beta_app/test/mocks/mock_logging_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:beta_app/enums/common_enums.dart' as _i3;
import 'package:beta_app/modules/logging/providers/logging_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggingProvider extends _i1.Mock implements _i2.LoggingProvider {
  MockLoggingProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.LogLevel get currentLogLevel => (super.noSuchMethod(
        Invocation.getter(#currentLogLevel),
        returnValue: _i3.LogLevel.debug,
      ) as _i3.LogLevel);

  @override
  set currentLogLevel(_i3.LogLevel? _currentLogLevel) => super.noSuchMethod(
        Invocation.setter(
          #currentLogLevel,
          _currentLogLevel,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Stream<_i2.LogEvent> get logEventStream => (super.noSuchMethod(
        Invocation.getter(#logEventStream),
        returnValue: _i4.Stream<_i2.LogEvent>.empty(),
      ) as _i4.Stream<_i2.LogEvent>);

  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void setLogLevel(_i3.LogLevel? newLevel) => super.noSuchMethod(
        Invocation.method(
          #setLogLevel,
          [newLevel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<void> logInfo(String? message) => (super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWarning(String? message) => (super.noSuchMethod(
        Invocation.method(
          #logWarning,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logError(
    String? message, {
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [message],
          {#stackTrace: stackTrace},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logScreenView(String? screenName) => (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [screenName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logEvent(
    String? eventName, {
    Map<String, Object>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logEvent,
          [eventName],
          {#parameters: parameters},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
