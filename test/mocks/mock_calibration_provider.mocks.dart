// Mocks generated by Mockito 5.4.4 from annotations
// in beta_app/test/mocks/mock_calibration_provider.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:beta_app/models/common/result.dart' as _i3;
import 'package:beta_app/modules/bluetooth_management/ble_fluorometer/providers/ibluetooth_manager.dart'
    as _i5;
import 'package:beta_app/modules/calibration/models/calibration_state.dart'
    as _i2;
import 'package:beta_app/modules/calibration/providers/calibration_provider.dart'
    as _i4;
import 'package:beta_app/modules/logging/providers/i_logging_provider.dart'
    as _i6;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:state_notifier/state_notifier.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCalibrationState_0 extends _i1.SmartFake
    implements _i2.CalibrationState {
  _FakeCalibrationState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResult_1<T> extends _i1.SmartFake implements _i3.Result<T> {
  _FakeResult_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CalibrationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCalibrationProvider extends _i1.Mock
    implements _i4.CalibrationProvider {
  MockCalibrationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set bluetoothManager(_i5.IBluetoothManager? _bluetoothManager) =>
      super.noSuchMethod(
        Invocation.setter(
          #bluetoothManager,
          _bluetoothManager,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set logger(_i6.ILoggingProvider? _logger) => super.noSuchMethod(
        Invocation.setter(
          #logger,
          _logger,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get sequenceId => (super.noSuchMethod(
        Invocation.getter(#sequenceId),
        returnValue: 0,
      ) as int);

  @override
  set sequenceId(int? _sequenceId) => super.noSuchMethod(
        Invocation.setter(
          #sequenceId,
          _sequenceId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set onError(_i7.ErrorListener? _onError) => super.noSuchMethod(
        Invocation.setter(
          #onError,
          _onError,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);

  @override
  _i8.Stream<_i2.CalibrationState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i8.Stream<_i2.CalibrationState>.empty(),
      ) as _i8.Stream<_i2.CalibrationState>);

  @override
  _i2.CalibrationState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeCalibrationState_0(
          this,
          Invocation.getter(#state),
        ),
      ) as _i2.CalibrationState);

  @override
  set state(_i2.CalibrationState? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.CalibrationState get debugState => (super.noSuchMethod(
        Invocation.getter(#debugState),
        returnValue: _FakeCalibrationState_0(
          this,
          Invocation.getter(#debugState),
        ),
      ) as _i2.CalibrationState);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Result<void> setNumberOfCalibrations(int? count) => (super.noSuchMethod(
        Invocation.method(
          #setNumberOfCalibrations,
          [count],
        ),
        returnValue: _FakeResult_1<void>(
          this,
          Invocation.method(
            #setNumberOfCalibrations,
            [count],
          ),
        ),
      ) as _i3.Result<void>);

  @override
  _i8.Future<_i3.Result<void>> setCalibrationPoint(
    int? pointIndex,
    double? concentration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCalibrationPoint,
          [
            pointIndex,
            concentration,
          ],
        ),
        returnValue: _i8.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #setCalibrationPoint,
            [
              pointIndex,
              concentration,
            ],
          ),
        )),
      ) as _i8.Future<_i3.Result<void>>);

  @override
  _i8.Future<_i3.Result<void>> beginCalibration() => (super.noSuchMethod(
        Invocation.method(
          #beginCalibration,
          [],
        ),
        returnValue: _i8.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #beginCalibration,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Result<void>>);

  @override
  _i8.Future<_i3.Result<void>> takeMeasurement() => (super.noSuchMethod(
        Invocation.method(
          #takeMeasurement,
          [],
        ),
        returnValue: _i8.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #takeMeasurement,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Result<void>>);

  @override
  _i8.Future<_i3.Result<void>> completeCalibration() => (super.noSuchMethod(
        Invocation.method(
          #completeCalibration,
          [],
        ),
        returnValue: _i8.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #completeCalibration,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Result<void>>);

  @override
  _i8.Future<_i3.Result<void>> restartCalibration() => (super.noSuchMethod(
        Invocation.method(
          #restartCalibration,
          [],
        ),
        returnValue: _i8.Future<_i3.Result<void>>.value(_FakeResult_1<void>(
          this,
          Invocation.method(
            #restartCalibration,
            [],
          ),
        )),
      ) as _i8.Future<_i3.Result<void>>);

  @override
  _i3.Result<void> nextStep() => (super.noSuchMethod(
        Invocation.method(
          #nextStep,
          [],
        ),
        returnValue: _FakeResult_1<void>(
          this,
          Invocation.method(
            #nextStep,
            [],
          ),
        ),
      ) as _i3.Result<void>);

  @override
  int getNextSequenceId() => (super.noSuchMethod(
        Invocation.method(
          #getNextSequenceId,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  bool updateShouldNotify(
    _i2.CalibrationState? old,
    _i2.CalibrationState? current,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            old,
            current,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i7.RemoveListener addListener(
    _i9.Listener<_i2.CalibrationState>? listener, {
    bool? fireImmediately = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
          {#fireImmediately: fireImmediately},
        ),
        returnValue: () {},
      ) as _i7.RemoveListener);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
