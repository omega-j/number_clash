// Mocks generated by Mockito 5.4.4 from annotations
// in beta_app/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:beta_app/models/common/result.dart' as _i2;
import 'package:beta_app/modules/logging/providers/i_logging_provider.dart'
    as _i3;
import 'package:beta_app/modules/logging/providers/logging_provider.dart'
    as _i5;
import 'package:beta_app/modules/settings/services/iuser_settings_service.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ILoggingProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockILoggingProvider extends _i1.Mock implements _i3.ILoggingProvider {
  MockILoggingProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.LogEvent> get logEventStream => (super.noSuchMethod(
        Invocation.getter(#logEventStream),
        returnValue: _i4.Stream<_i5.LogEvent>.empty(),
      ) as _i4.Stream<_i5.LogEvent>);

  @override
  _i4.Future<void> logInfo(String? message) => (super.noSuchMethod(
        Invocation.method(
          #logInfo,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logWarning(String? message) => (super.noSuchMethod(
        Invocation.method(
          #logWarning,
          [message],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logError(
    String? message, {
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logError,
          [message],
          {#stackTrace: stackTrace},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> logScreenView(String? screenName) => (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [screenName],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [IUserSettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserSettingsService extends _i1.Mock
    implements _i6.IUserSettingsService {
  MockIUserSettingsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<String?>> loadLanguagePreference() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadLanguagePreference,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Result<String?>>.value(_FakeResult_0<String?>(
          this,
          Invocation.method(
            #loadLanguagePreference,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<String?>>);

  @override
  _i4.Future<_i2.Result<bool>> loadNotificationPreference() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadNotificationPreference,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #loadNotificationPreference,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> loadAccessibilityPreference() =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAccessibilityPreference,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #loadAccessibilityPreference,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<void>> saveLanguagePreference(String? language) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveLanguagePreference,
          [language],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #saveLanguagePreference,
            [language],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> saveNotificationPreference(bool? isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNotificationPreference,
          [isEnabled],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #saveNotificationPreference,
            [isEnabled],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<void>> saveAccessibilityPreference(bool? isEnabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAccessibilityPreference,
          [isEnabled],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #saveAccessibilityPreference,
            [isEnabled],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);
}
